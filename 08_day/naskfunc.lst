     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ; NASMではエラーが出るのでコメントアウト
     5                                  ;[FORMAT "WCOFF"] ; オブジェクトファイルを作るモード
     6                                  [BITS 32] ; 32ビットモードの機械語を作らせる
     7                                  
     8                                  ; NASMではエラーが出るのでコメントアウト
     9                                  ;[FILE "naskfunc.nas]
    10                                  	GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
    11                                  	GLOBAL _io_in8, _io_in16, _io_in32
    12                                  	GLOBAL _io_out8, _io_out16, _io_out_32
    13                                  	GLOBAL _io_load_eflags, _io_store_eflags
    14                                  	GLOBAL _load_gdtr, _load_idtr
    15                                  	GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    16                                  	EXTERN _inthandler21, _inthandler27, _inthandler2c
    17                                  
    18                                  ; 以下は実際の関数
    19                                  [SECTION .text] ; オブジェクトファイルではこれを書いてからプログラムを書く
    20                                  _io_hlt: ; void io_hlt(void);
    21 00000000 F4                      	HLT
    22 00000001 C3                      	RET
    23                                  
    24                                  _io_cli: ; void _io_cli(void);
    25 00000002 FA                      	CLI
    26 00000003 C3                      	RET
    27                                  
    28                                  _io_sti: ; void _io_sti(void);
    29 00000004 FB                      	STI
    30 00000005 C3                      	RET
    31                                  
    32                                  _io_stihlt: ; void _io_stihlt(void);
    33 00000006 FB                      	STI
    34 00000007 F4                      	HLT
    35 00000008 C3                      	RET
    36                                  
    37                                  _io_in8: ; int _io_in8(int port);
    38 00000009 8B542404                	MOV EDX,[ESP+4]
    39 0000000D B800000000              	MOV EAX,0
    40 00000012 EC                      	IN	AL,DX
    41 00000013 C3                      	RET
    42                                  
    43                                  _io_in16: ; int _io_in16(int port);
    44 00000014 8B542404                	MOV EDX,[ESP+4]
    45 00000018 B800000000              	MOV EAX,0
    46 0000001D 66ED                    	IN	AX,DX
    47 0000001F C3                      	RET
    48                                  
    49                                  _io_in32: ; int _io_in32(int port);
    50 00000020 8B542404                	MOV EDX,[ESP+4]
    51 00000024 B800000000              	MOV EAX,0
    52 00000029 ED                      	IN	EAX,DX
    53 0000002A C3                      	RET
    54                                  
    55                                  _io_out8: ; void _io_out8(int port, int data);
    56 0000002B 8B542404                	MOV EDX,[ESP+4]
    57 0000002F 8A442408                	MOV AL,[ESP+8]
    58 00000033 EE                      	OUT DX,AL
    59 00000034 C3                      	RET
    60                                  
    61                                  _io_out16: ; void _io_out16(int port, int data);
    62 00000035 8B542404                	MOV EDX,[ESP+4]
    63 00000039 8A442408                	MOV AL,[ESP+8]
    64 0000003D 66EF                    	OUT DX,AX
    65 0000003F C3                      	RET
    66                                  
    67                                  _io_out32: ; void _io_out32(int port, int data);
    68 00000040 8B542404                	MOV EDX,[ESP+4]
    69 00000044 8A442408                	MOV AL,[ESP+8]
    70 00000048 EF                      	OUT DX,EAX
    71 00000049 C3                      	RET
    72                                  
    73                                  _io_load_eflags: ; int _io_load_eflags(void);
    74 0000004A 9C                      	PUSHFD
    75 0000004B 58                      	POP EAX
    76 0000004C C3                      	RET
    77                                  
    78                                  _io_store_eflags: ; void _io_store_eflags(int eflags);
    79 0000004D 8B442404                	MOV EAX,[ESP+4]
    80 00000051 50                      	PUSH EAX
    81 00000052 9D                      	POPFD
    82 00000053 C3                      	RET
    83                                  
    84                                  _load_gdtr: ; void _load_gdtr(int limit, int addr);
    85 00000054 668B442404              	MOV	AX,[ESP+4]
    86 00000059 6689442406              	MOV	[ESP+6],AX
    87 0000005E 0F01542406              	LGDT [ESP+6]
    88 00000063 C3                      	RET
    89                                  
    90                                  _load_idtr: ; void _load_idtr(int limit, int addr);
    91 00000064 668B442404              	MOV AX,[ESP+4]
    92 00000069 6689442406              	MOV	[ESP+6],AX
    93 0000006E 0F015C2406              	LIDT [ESP+6]
    94 00000073 C3                      	RET
    95                                  
    96                                  _asm_inthandler21:
    97 00000074 06                      		PUSH	ES
    98 00000075 1E                      		PUSH	DS
    99 00000076 60                      		PUSHAD
   100 00000077 89E0                    		MOV		EAX,ESP
   101 00000079 50                      		PUSH	EAX
   102 0000007A 668CD0                  		MOV		AX,SS
   103 0000007D 8ED8                    		MOV		DS,AX
   104 0000007F 8EC0                    		MOV		ES,AX
   105 00000081 E8(00000000)            		CALL	_inthandler21
   106 00000086 58                      		POP		EAX
   107 00000087 61                      		POPAD
   108 00000088 1F                      		POP		DS
   109 00000089 07                      		POP		ES
   110 0000008A CF                      		IRETD
   111                                  
   112                                  _asm_inthandler27:
   113 0000008B 06                      		PUSH	ES
   114 0000008C 1E                      		PUSH	DS
   115 0000008D 60                      		PUSHAD
   116 0000008E 89E0                    		MOV		EAX,ESP
   117 00000090 50                      		PUSH	EAX
   118 00000091 668CD0                  		MOV		AX,SS
   119 00000094 8ED8                    		MOV		DS,AX
   120 00000096 8EC0                    		MOV		ES,AX
   121 00000098 E8(00000000)            		CALL	_inthandler27
   122 0000009D 58                      		POP		EAX
   123 0000009E 61                      		POPAD
   124 0000009F 1F                      		POP		DS
   125 000000A0 07                      		POP		ES
   126 000000A1 CF                      		IRETD
   127                                  
   128                                  _asm_inthandler2c:
   129 000000A2 06                      		PUSH	ES
   130 000000A3 1E                      		PUSH	DS
   131 000000A4 60                      		PUSHAD
   132 000000A5 89E0                    		MOV		EAX,ESP
   133 000000A7 50                      		PUSH	EAX
   134 000000A8 668CD0                  		MOV		AX,SS
   135 000000AB 8ED8                    		MOV		DS,AX
   136 000000AD 8EC0                    		MOV		ES,AX
   137 000000AF E8(00000000)            		CALL	_inthandler2c
   138 000000B4 58                      		POP		EAX
   139 000000B5 61                      		POPAD
   140 000000B6 1F                      		POP		DS
   141 000000B7 07                      		POP		ES
   142 000000B8 CF                      		IRETD
